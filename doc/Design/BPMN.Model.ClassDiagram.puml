@startuml

struct ElementId {
    Id : string
}

interface IElement {
    Id : ElementId
}

IElement ..> ElementId

abstract class Element
{
    ~ Init(string, IModelingContext)
    ~ AttachTo(IModelingContext)
    ~ DetachFrom(IElement) : bool
}

Element -|> IElement
Element ..> IModelingContext

interface IModel {
    + Get(ElementId) : IElement?
    + Get<TElement>(ElementId) : TElement?
    + Get<TElement>() : TElement[]
}

IModel ..> ElementId
IModel ..> IElement

interface IModelingContext {
    + Register(IElement)
    + Unregister(IElement)
}

IModelingContext ..> IElement

class ModelingContext

ModelingContext -|> IModelingContext

class Model {
    - context : ModelingContext
    - elements : Dict<ElementId, Element>

    + CreateNew<TElement>(string?) : TElement
    + Attach<TElement>() : TElement
    ~ Add(IElement)
    ~ Remove(IElement)
}

Model -|> IModel
Model -> ModelingContext
Model ..> ElementId
Model ..> Element

abstract class Event {
    Name : string
}

Event -|> Element

class StartEvent {
    Type : StartEventTypes
}

enum StartEventTypes {
    None
    Message
    Timer
    Error
    Escalating
    Compensation
    Conditional
    Signal
    Multiple
    ParallelMultiple
}

StartEvent -|> Event
StartEvent ..> StartEventTypes

class EndEvent {
    Type : EndEventTypes
}

enum EndEventTypes {
    None
    Message
    Error
    Escalating
    Cancel
    Compensation
    Signal
    Terminate
    Multiple
}

EndEvent -|> Event
EndEvent ..> EndEventTypes

class IntermediateThrowingEvent {
    Type : IntermediateThrowingEventTypes
}

enum IntermediateThrowingEventTypes {
    None
    Message
    Escalating
    Compensation
    Link
    Signal
    Multiple
}

IntermediateThrowingEvent -|> Event
IntermediateThrowingEvent ..> IntermediateThrowingEventTypes

class IntermediateCatchingEvent {
    Type : IntermediateCatchingEventTypes
}

enum IntermediateCatchingEventTypes {
    None
    Message
    Timer
    Error
    Escalating
    Cancel
    Compensation
    Conditional
    Link
    Signal
    Multiple
    ParallelMultiple
}

IntermediateCatchingEvent -|> Event
IntermediateCatchingEvent ..> IntermediateCatchingEventTypes

class InterruptingBoundaryEvent {
    Type : InterruptingBoundaryEventTypes
}

enum InterruptingBoundaryEventTypes {
    None
    Message
    Timer
    Error
    Escalating
    Compensation
    Conditional
    Signal
    Multiple
    ParallelMultiple
}

InterruptingBoundaryEvent -|> Event
InterruptingBoundaryEvent ..> InterruptingBoundaryEventTypes

class NonInterruptingBoundaryEvent {
    Type : NonInterruptingBoundaryEventTypes
}

enum NonInterruptingBoundaryEventTypes {
    None
    Message
    Timer
    Escalating
    Conditional
    Signal
    Multiple
    ParallelMultiple
}

NonInterruptingBoundaryEvent -|> Event
NonInterruptingBoundaryEvent ..> NonInterruptingBoundaryEventTypes

abstract class Activity {
    Name : string
}

Activity -|> Element

class Task

Task -|> Activity

abstract class Gateway {
    Decision : string
}

Gateway -|> Element

class XORGateway

XORGateway -|> Gateway

class ParallelGateway

ParallelGateway -|> Gateway

@enduml
